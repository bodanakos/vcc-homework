- name: Install prerequisites
  apt: name=aptitude update_cache=yes state=latest force_apt_get=yes
  tags: [ system ]

- name: Install MariaDB Packages
  apt: name={{ item }} update_cache=yes state=latest
  loop: [ 'mariadb-server', 'python3-pymysql' ]
  tags: [ system ]

- name: Copy the root credentials as .my.cnf file
  template:
    src=root.cnf.j2
    dest=~/.my.cnf mode=0600

- name: Set the root password
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  tags: [ mysql, mysql-root ]

- name: Remove all anonymous user accounts
  mysql_user:
    name: ''
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Remove the MySQL test database
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Creates database for WordPress
  mysql_db:
    name: "{{ mysql_db }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Create MySQL user for WordPress
  mysql_user:
    name: "{{ mysql_user }}"
    host: "{{ webserver_private_ip }}"
    password: "{{ mysql_password }}"
    priv: "{{ mysql_db }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  tags: [ mysql ]

- name: Create Haproxy user
  mysql_user:
    name: "{{ haproxy_db_user }}"
    host: "{{ webserver_private_ip }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Copy galera.cnf
  tags: [ mariadb-galera ]
  template:
    src="templates/default.cnf.j2"
    dest=/etc/mysql/mariadb.conf.d/galera.cnf

- name: Check if Galera Cluster has been installed
  stat:
    path: /etc/galera_has_been_installed
  register: galera_has_been_installed

- name: stop MariaDB serivce
  service:
    name: mariadb
    state: stopped
  when: not galera_has_been_installed.stat.exists

- name: Start new cluster on first node
  shell: /usr/bin/galera_new_cluster
  when: ansible_ssh_host == cluster_hosts[0].public_ip and not galera_has_been_installed.stat.exists

- name: Start MariaDB on all node, except first
  service:
    name: mariadb
    state: started
  when: ansible_ssh_host != cluster_hosts[0].public_ip and not galera_has_been_installed.stat.exists

- name: Confirm that Galera has been installed  (create file to /etc/galera_has_been_installed)
  file:
    path: /etc/galera_has_been_installed
    state: touch
  when: not galera_has_been_installed.stat.exists
